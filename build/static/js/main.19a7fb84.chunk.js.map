{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","results","console","error","Feature","featuredResult","id","title","dated","description","culture","technique","people","map","person","displayname","medium","style","dimensions","department","division","contact","creditline","src","primaryimageurl","alt","images","image","log","baseimageurl","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","disabled","prev","next","record","key","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","values","onSubmit","queryResults","htmlFor","type","placeholder","onChange","target","length","name","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"oMAKaA,EAAW,oCACXC,EAAM,8CAKZ,SAAeC,EAAtB,oC,4CAAO,WAAiDC,EAAMC,GAAvD,iBAAAC,EAAA,+EAEoBC,MAAM,GAAD,OACvBN,EADuB,mBACJC,EADI,YACGE,EADH,YACWI,UACnCH,EAAMI,MAAM,KAAKC,KAAK,QAJvB,cAEGC,EAFH,gBAOgBA,EAASC,OAPzB,cAOGC,EAPH,yBASIA,GATJ,wG,sBAkBA,SAAeC,EAAtB,kC,4CAAO,WAAwCC,GAAxC,iBAAAT,EAAA,+EAEoBC,MAAMQ,GAF1B,cAEGJ,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAgBA,SAAeG,EAAtB,kC,4CAAO,uCAAAV,EAAA,6DACLW,EADK,EACLA,QACAC,EAFK,EAELA,eACAC,EAHK,EAGLA,YAEMJ,EALD,UAKUd,EALV,mBAK6BC,EAL7B,2BAKmDgB,EALnD,oBAK6ED,EAL7E,oBAKgGE,GALhG,kBAQoBZ,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,yBAWIA,GAXJ,wG,sBAoBA,SAAeO,IAAtB,+B,4CAAO,kCAAAd,EAAA,0DACDe,aAAaC,QAAQ,aADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,eAFpC,cAKCP,EALD,UAKUd,EALV,oBAK8BC,EAL9B,kDAQoBK,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,YAAaH,KAAKI,UAAUF,IAZ9C,kBAcIA,GAdJ,wG,sBAuBA,SAAeG,IAAtB,+B,4CAAO,kCAAAtB,EAAA,0DACDe,aAAaC,QAAQ,mBADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,qBAFpC,cAKCP,EALD,UAKUd,EALV,2BAKqCC,EALrC,yCAQoBK,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,kBAAmBH,KAAKI,UAAUF,IAZpD,kBAcIA,GAdJ,wG,sBCzDP,IAAMI,EAAa,SAAC,GAKb,IAJLC,EAII,EAJJA,WACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,aACAC,EACI,EADJA,iBAEA,OACE,0BAAMC,UAAU,WACd,uBACEC,KAAK,IACLC,QAAO,uCAAE,WAAOC,GAAP,eAAA/B,EAAA,6DACP+B,EAAMC,iBACNN,GAAa,GAFN,kBAIiB7B,EACpB2B,EACAC,GANG,OAICQ,EAJD,OAQLN,EAAiBM,GARZ,gDAULC,QAAQC,MAAR,MAVK,yBAYLT,GAAa,GAZR,4EAAF,uDAgBND,KA4IMW,EApGC,SAAC,GAqBV,IApBLV,EAoBI,EApBJA,aACAC,EAmBI,EAnBJA,iBACAU,EAkBI,EAlBJA,eAmBA,OAAOA,EACL,0BAAMC,GAAG,WACP,yBAAKV,UAAU,kBACb,gCACE,4BAAKS,EAAeE,OACpB,4BAAKF,EAAeG,QAEtB,0BAAMZ,UAAU,SAAhB,eACA,0BAAMA,UAAU,WAAWS,EAAeI,aAC1C,6BAASb,UAAU,SACjB,0BAAMA,UAAU,SAAhB,WACA,kBAAC,EAAD,CACEJ,WAAY,UACZC,YAAaY,EAAeK,QAC5BhB,aAAcA,EACdC,iBAAkBA,IAEpB,0BAAMC,UAAU,SAAhB,aACA,kBAAC,EAAD,CACEJ,WAAY,YACZC,YAAaY,EAAeM,UAC5BjB,aAAcA,EACdC,iBAAkBA,IAEpB,0BAAMC,UAAU,SAAhB,UACCS,EAAeO,OACZP,EAAeO,OAAOC,KAAI,SAACC,GACzB,OACE,kBAAC,EAAD,CACEtB,WAAY,SACZC,YAAaqB,EAAOC,YACpBrB,aAAcA,EACdC,iBAAkBA,OAIxB,KACJ,0BAAMC,UAAU,SAAhB,UACA,kBAAC,EAAD,CACEJ,WAAY,SACZC,YAAaY,EAAeW,OAC5BtB,aAAcA,EACdC,iBAAkBA,IAEpB,0BAAMC,UAAU,SAAhB,SACA,0BAAMA,UAAU,WAAWS,EAAeY,OAC1C,0BAAMrB,UAAU,SAAhB,cACA,0BAAMA,UAAU,WAAWS,EAAea,YAC1C,0BAAMtB,UAAU,SAAhB,cACA,0BAAMA,UAAU,WAAWS,EAAec,YAC1C,0BAAMvB,UAAU,SAAhB,YACA,0BAAMA,UAAU,WAAWS,EAAee,UAC1C,0BAAMxB,UAAU,SAAhB,WACA,0BAAMA,UAAU,WAAWS,EAAegB,SAC1C,0BAAMzB,UAAU,SAAhB,UACA,0BAAMA,UAAU,WAAWS,EAAeiB,aAE5C,6BAAS1B,UAAU,UACjB,yBACE2B,IAAKlB,EAAemB,gBACpBC,IAAKpB,EAAeE,QAErBF,EAAeqB,OACZrB,EAAeqB,OAAOb,KAAI,SAACc,GAEzB,OADAzB,QAAQ0B,IAAID,GAEV,yBAAKJ,IAAKI,EAAME,aAAcJ,IAAKpB,EAAeE,WAGtD,QAKV,0BAAMD,GAAG,aC9KEwB,EARC,WACd,OACE,yBAAKxB,GAAG,WACN,wBAAIV,UAAU,WAAd,kBCgFSmC,EAtFC,SAAC,GAKV,IAJLpC,EAII,EAJJA,iBACAqC,EAGI,EAHJA,kBACAtC,EAEI,EAFJA,aAEI,IADJuC,cAAiBC,EACb,EADaA,KAAM/C,EACnB,EADmBA,QACnB,SAaWgD,EAbX,8EAaJ,WAAyBC,GAAzB,eAAApE,EAAA,6DACE0B,GAAa,GADf,kBAI0BlB,EAAyB4D,GAJnD,OAIUnC,EAJV,OAKIN,EAAiBM,GALrB,gDAOIC,QAAQC,MAAR,MAPJ,yBASIT,GAAa,GATjB,6EAbI,sBA0BJ,OACE,2BAAOY,GAAG,WACR,4BAAQV,UAAU,cAEhB,4BAEEyC,UAAWH,EAAKI,KAChB1C,UAAU,WAEVE,QAAS,WACPqC,EAAUD,EAAKI,QANnB,YAYA,4BAEED,UAAWH,EAAKK,KAChB3C,UAAU,OAEVE,QAAS,WACPqC,EAAUD,EAAKK,QANnB,SAYF,6BAAS3C,UAAU,WAChBT,EAAQ0B,KAAI,SAAC2B,GAAD,OACX,yBACEC,IAAKD,EAAOlC,GACZV,UAAU,iBACVE,QAAS,SAACC,GACRA,EAAMC,iBACNgC,EAAkBQ,KAIlBA,EAAOhB,gBACL,yBAAKD,IAAKiB,EAAOhB,gBAAiBC,IAAKe,EAAO/B,cAC5C,KAIJ+B,EAAOjC,MAAQ,4BAAKiC,EAAOjC,OAAc,mDCoExCmC,EA7IA,SAAC,GAAwC,IAAtChD,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,iBAAuB,EAafgD,mBAAS,IAbM,mBAa9CC,EAb8C,KAajCC,EAbiC,OAcDF,mBAAS,IAdR,mBAc9CG,EAd8C,KAc1BC,EAd0B,OAefJ,mBAAS,IAfM,mBAe9C9D,EAf8C,KAejCmE,EAfiC,OAgBvBL,mBAAS,OAhBc,mBAgB9ChE,EAhB8C,KAgBrCsE,EAhBqC,OAiBTN,mBAAS,OAjBA,mBAiB9C/D,EAjB8C,KAiB9BsE,EAjB8B,KAuDrD,OA7BAC,qBAAU,WACR,IACEC,QAAQC,IAAI,CAACvE,IAAqBQ,MAA4BgE,MAC5D,SAACC,GACCV,EAAeU,EAAO,IACtBR,EAAsBQ,EAAO,OAGjC,MAAOpD,GACPD,QAAQC,MAAMA,MAEf,IAmBD,0BACEG,GAAG,SACHkD,SAAQ,uCAAE,WAAOzD,GAAP,eAAA/B,EAAA,6DACR+B,EAAMC,iBACNN,GAAa,GAFL,kBAIqBhB,EAAkB,CAC3CC,UACAC,iBACAC,gBAPI,OAIA4E,EAJA,OASN9D,EAAiB8D,GATX,gDAWNvD,QAAQC,MAAR,MAXM,yBAaNT,GAAa,GAbP,4EAAF,uDAiBR,kCACE,2BAAOgE,QAAQ,YAAf,SACA,2BACEpD,GAAG,WACHqD,KAAK,OACLC,YAAY,oBAEZ7F,MAAOc,EAEPgF,SAAU,SAAC9D,GACTiD,EAAejD,EAAM+D,OAAO/F,WAIlC,kCACE,2BAAO2F,QAAQ,yBAAf,iBACiB,IACf,0BAAM9D,UAAU,wBAAhB,IACIkD,EAAmBiB,OADvB,MAIF,4BACEC,KAAK,iBACL1D,GAAG,wBAEHvC,MAAOa,EAEPiF,SAAU,SAAC9D,GACTmD,EAAkBnD,EAAM+D,OAAO/F,SAGjC,4BAAQA,MAAM,OAAd,OACC+E,EAAmBjC,KAAI,SAACjC,GAAD,OACtB,4BAAQb,MAAOa,EAAeoF,KAAMvB,IAAK7D,EAAe0B,IACrD1B,EAAeoF,WAKxB,kCACE,2BAAON,QAAQ,kBAAf,WACU,0BAAM9D,UAAU,iBAAhB,IAAkCgD,EAAYmB,OAA9C,MAEV,4BACEC,KAAK,UACL1D,GAAG,iBAEHvC,MAAOY,EAEPkF,SAAU,SAAC9D,GACTkD,EAAWlD,EAAM+D,OAAO/F,SAG1B,4BAAQA,MAAM,OAAd,OACC6E,EAAY/B,KAAI,SAAClC,GAAD,OACf,4BAAQZ,MAAOY,EAAQqF,KAAMvB,IAAK9D,EAAQ2B,IACvC3B,EAAQqF,WAKjB,4CC1HSC,EATD,WACZ,OACE,yBAAK3D,GAAG,SACN,iDACA,qFCdA4D,EAAM,WAAM,MAS0BvB,mBAAS,CAAET,KAAM,GAAI/C,QAAS,KATxD,mBAST8C,EATS,KASMtC,EATN,OAU4BgD,mBAAS,MAVrC,mBAUTtC,EAVS,KAUO2B,EAVP,OAWkBW,oBAAS,GAX3B,mBAWTwB,EAXS,KAWEzE,EAXF,KAchB,OACE,yBAAKE,UAAU,OAEb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQF,aAAcA,EAAcC,iBAAkBA,IAEtD,kBAAC,EAAD,CACEsC,cAAeA,EACfvC,aAAcA,EACdC,iBAAkBA,EAClBqC,kBAAmBA,IAGrB,kBAAC,EAAD,CACE3B,eAAgBA,EAChBX,aAAcA,EACdC,iBAAkBA,IAGnBwE,EAAY,kBAAC,EAAD,MAAc,OAKjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.19a7fb84.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n *\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = \"https://api.harvardartmuseums.org\";\nexport const KEY = \"apikey=d26c93df-b997-4aa7-ab86-bafb04a7b4eb\";\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/object?${KEY}&${term}=${encodeURI(\n        value.split(\"-\").join(\"|\")\n      )}`\n    );\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n *\n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${BASE_URL}/object?${KEY}&classification=${classification}&century=${century}&keyword=${queryString}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem(\"centuries\")) {\n    return JSON.parse(localStorage.getItem(\"centuries\"));\n  }\n\n  const url = `${BASE_URL}/century?${KEY}&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem(\"centuries\", JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem(\"classifications\")) {\n    return JSON.parse(localStorage.getItem(\"classifications\"));\n  }\n\n  const url = `${BASE_URL}/classification?${KEY}&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem(\"classifications\", JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n","import React, { Fragment } from \"react\";\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n\n/**\n * We need a new component called Searchable which:\n *\n * Has a template like this:\n *\n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n *\n * When someone clicks the anchor tag, you should:\n *\n * - preventDefault on the event\n * - call setIsLoading, set it to true\n *\n * Then start a try/catch/finally block:\n *\n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch:\n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = ({\n  searchTerm,\n  searchValue,\n  setIsLoading,\n  setSearchResults,\n}) => {\n  return (\n    <span className=\"content\">\n      <a\n        href=\"#\"\n        onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n            const results = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue\n            );\n            setSearchResults(results);\n          } catch (error) {\n            console.error(error);\n          } finally {\n            setIsLoading(false);\n          }\n        }}\n      >\n        {searchValue}\n      </a>\n    </span>\n  );\n};\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n *\n * <main id=\"feature\"></main>\n *\n * And like this when one is:\n *\n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n *\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\n * technique, medium, dimensions, people, department, division, contact, creditline\n *\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n *\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n *\n * This component should be exported as default.\n */\nconst Feature = ({\n  setIsLoading,\n  setSearchResults,\n  featuredResult,\n  //   featuredResult: {\n  //     title,\n  //     dated,\n  //     images,\n  //     primaryimageurl,\n  //     description,\n  //     culture,\n  //     style,\n  //     technique,\n  //     medium,\n  //     dimensions,\n  //     people,\n  //     department,\n  //     division,\n  //     contact,\n  //     creditline,\n  //   },\n}) => {\n  return featuredResult ? (\n    <main id=\"feature\">\n      <div className=\"object-feature\">\n        <header>\n          <h3>{featuredResult.title}</h3>\n          <h4>{featuredResult.dated}</h4>\n        </header>\n        <span className=\"title\">Description</span>\n        <span className=\"content\">{featuredResult.description}</span>\n        <section className=\"facts\">\n          <span className=\"title\">Culture</span>\n          <Searchable\n            searchTerm={\"culture\"}\n            searchValue={featuredResult.culture}\n            setIsLoading={setIsLoading}\n            setSearchResults={setSearchResults}\n          />\n          <span className=\"title\">Technique</span>\n          <Searchable\n            searchTerm={\"technique\"}\n            searchValue={featuredResult.technique}\n            setIsLoading={setIsLoading}\n            setSearchResults={setSearchResults}\n          />\n          <span className=\"title\">People</span>\n          {featuredResult.people\n            ? featuredResult.people.map((person) => {\n                return (\n                  <Searchable\n                    searchTerm={\"person\"}\n                    searchValue={person.displayname}\n                    setIsLoading={setIsLoading}\n                    setSearchResults={setSearchResults}\n                  />\n                );\n              })\n            : null}\n          <span className=\"title\">Medium</span>\n          <Searchable\n            searchTerm={\"medium\"}\n            searchValue={featuredResult.medium}\n            setIsLoading={setIsLoading}\n            setSearchResults={setSearchResults}\n          />\n          <span className=\"title\">Style</span>\n          <span className=\"content\">{featuredResult.style}</span>\n          <span className=\"title\">Dimensions</span>\n          <span className=\"content\">{featuredResult.dimensions}</span>\n          <span className=\"title\">Department</span>\n          <span className=\"content\">{featuredResult.department}</span>\n          <span className=\"title\">Division</span>\n          <span className=\"content\">{featuredResult.division}</span>\n          <span className=\"title\">Contact</span>\n          <span className=\"content\">{featuredResult.contact}</span>\n          <span className=\"title\">Credit</span>\n          <span className=\"content\">{featuredResult.creditline}</span>\n        </section>\n        <section className=\"photos\">\n          <img\n            src={featuredResult.primaryimageurl}\n            alt={featuredResult.title}\n          />\n          {featuredResult.images\n            ? featuredResult.images.map((image) => {\n                console.log(image);\n                return (\n                  <img src={image.baseimageurl} alt={featuredResult.title} />\n                );\n              })\n            : null}\n        </section>\n      </div>\n    </main>\n  ) : (\n    <main id=\"feature\"></main>\n  );\n};\n\nexport default Feature;\n","import React from \"react\";\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n *\n * The JSX in your component should look like:\n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\nconst Loading = () => {\n  return (\n    <div id=\"loading\">\n      <h2 className=\"message\">Searching...</h2>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from \"../api\";\n\nconst Preview = ({\n  setSearchResults,\n  setFeaturedResult,\n  setIsLoading,\n  searchResults: { info, records },\n}) => {\n  /**\n   *  Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   *  and also destructure info and records from props.searchResults\n   *\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n  /**\n   * Don't touch this function, it's good to go.\n   *\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n        <button\n          // TODO Fill in the {} with the correct value\n          disabled={!info.prev}\n          className=\"previous\"\n          // TODO Fill in or replace this onClick with the correct callback\n          onClick={() => {\n            fetchPage(info.prev);\n          }}\n        >\n          Previous\n        </button>\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button\n          // TODO in the next {} with the correct value:\n          disabled={!info.next}\n          className=\"next\"\n          // TODO Fill in or replace this on Click with the correct callback\n          onClick={() => {\n            fetchPage(info.next);\n          }}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {records.map((record) => (\n          <div\n            key={record.id}\n            className=\"object-preview\"\n            onClick={(event) => {\n              event.preventDefault();\n              setFeaturedResult(record);\n            }}\n          >\n            {\n              record.primaryimageurl ? (\n                <img src={record.primaryimageurl} alt={record.description} />\n              ) : null\n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing\n            }\n            {\n              record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        ))}\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;\n","import React, { useEffect, useState } from \"react\";\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from \"../api\";\n\nconst Search = ({ setIsLoading, setSearchResults }) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   *\n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    try {\n      Promise.all([fetchAllCenturies(), fetchAllClassifications()]).then(\n        (values) => {\n          setCenturyList(values[0]);\n          setClassificationList(values[1]);\n        }\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n        try {\n          const queryResults = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n          setSearchResults(queryResults);\n        } catch (error) {\n          console.error(error);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          // TODO UN-comment and fill in the correct value:\n          value={queryString}\n          // TODO UN-comment and fill in the correct onChange function\n          onChange={(event) => {\n            setQueryString(event.target.value);\n          }}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          // TODO UN-comment the value property, and pass it the correct value\n          value={classification}\n          // TODO UN-comment and fill in the correct onChange function\n          onChange={(event) => {\n            setClassification(event.target.value);\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {classificationList.map((classification) => (\n            <option value={classification.name} key={classification.id}>\n              {classification.name}\n            </option>\n          ))}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          // TODO UN-comment the value property, and pass it the correct value\n          value={century}\n          // TODO UN-comment and fill in the correct onChange function\n          onChange={(event) => {\n            setCentury(event.target.value);\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {centuryList.map((century) => (\n            <option value={century.name} key={century.id}>\n              {century.name}\n            </option>\n          ))}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n *\n * The returned JSX Should look like:\n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title = () => {\n  return (\n    <div id=\"title\">\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  );\n};\n\nexport default Title;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// These imports won't work until you fix ./components/index.js\nimport { Feature, Loading, Preview, Search, Title } from \"./components\";\n\nconst App = () => {\n  /**\n   * This App component is our TOP LEVEL component. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using the useState() hook for the following:\n   *\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // * FOR THE FOLLOWING CODE, COMMENT YOUR COMPONENTS IN, AS YOU WORK ON THEM TO AVOID ERRORS BREAKING YOUR CODE!\n  return (\n    <div className=\"app\">\n      {/* The following Title component is static, doesn't need any props */}\n      <Title />\n      {/* The following Search component needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      {/* The following Preview component needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n      <Preview\n        searchResults={searchResults}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n        setFeaturedResult={setFeaturedResult}\n      />\n      {/* The following Feature component needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n      <Feature\n        featuredResult={featuredResult}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n      />\n      {/* The following Loading component is static, but should only render when isLoading is true */}\n      {isLoading ? <Loading /> : null}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"],"sourceRoot":""}